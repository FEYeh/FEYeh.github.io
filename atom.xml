<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FEYehのBlog</title>
  
  <subtitle>I have no special talent. I am only passionately curious.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ebooks4coding.com/"/>
  <updated>2018-12-11T13:20:24.881Z</updated>
  <id>https://ebooks4coding.com/</id>
  
  <author>
    <name>FEYeh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端面试题系列1-JS基础</title>
    <link href="https://ebooks4coding.com/interview-js/"/>
    <id>https://ebooks4coding.com/interview-js/</id>
    <published>2018-09-13T17:26:00.000Z</published>
    <updated>2018-12-11T13:20:24.881Z</updated>
    
    <content type="html"><![CDATA[<p>不定时更新:-D</p><h1 id="如何定义一个类？"><a href="#如何定义一个类？" class="headerlink" title="如何定义一个类？"></a>如何定义一个类？</h1><p>参考答案：</p><p>主要有构造函数原型和对象创建两种方法。</p><p>原型法是通用老方法，对象创建是ES5推荐使用的方法。</p><p>目前来看，原型法更普遍。</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'John'</span>;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.sayName();</span><br></pre></td></tr></table></figure><h1 id="js类继承有哪些方法？"><a href="#js类继承有哪些方法？" class="headerlink" title="js类继承有哪些方法？"></a>js类继承有哪些方法？</h1><p>参考答案：</p><p>原型链法、属性复制法和构造器应用法。另外，由于每个对象可以是一个类，这些方法也可以用于对象类的继承。</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原型链法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'animal'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 人继承自动物</span></span><br><span class="line">Person.prototype = Animal.prototype;</span><br><span class="line"><span class="comment">// 更新构造函数为人</span></span><br><span class="line">Person.prototype.constructor = <span class="string">'Person'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性复制法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'animal'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">​</span><br><span class="line"><span class="comment">// 复制动物的所有属性到人量边</span></span><br><span class="line"><span class="keyword">for</span>(prop <span class="keyword">in</span> Animal.prototype) &#123;</span><br><span class="line">  Person.prototype[prop] = Animal.prototype[prop];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新构造函数为人</span></span><br><span class="line">Person.prototype.constructor = <span class="string">'Person'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造器法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'animal'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Animal.call(<span class="keyword">this</span>); <span class="comment">// apply, call, bind方法都可以。区别见6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="js如何实现类多重继承？"><a href="#js如何实现类多重继承？" class="headerlink" title="js如何实现类多重继承？"></a>js如何实现类多重继承？</h1><p>参考答案：</p><p>就是类继承方法中的属性复制法来实现。因为当所有父类的prototype属性被复制后，子类自然拥有类似行为和属性。</p><h1 id="什么是js的作用域？"><a href="#什么是js的作用域？" class="headerlink" title="什么是js的作用域？"></a>什么是js的作用域？</h1><p>参考答案：</p><p>大多数语言使用的都是块作用域，以{}进行限定，js中不是。js中叫函数作用域，就是一个变量在全函数里有效。</p><p>比如有个变量p1在函数最后一行定义，第一行也有效，但是值是undefined。</p><p>代码：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数作用域</span></span><br><span class="line"><span class="keyword">var</span> globalVar = <span class="string">'global var'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(globalVar); <span class="comment">// undefined, 因为globalVar在本函数内被重定义了，导致全局失效，这里使用函数内的变量值，可是此时还没定义</span></span><br><span class="line">  <span class="keyword">var</span> globalVar = <span class="string">'overrided var'</span>; <span class="comment">//　globalVar在本函数内被重定义</span></span><br><span class="line">  <span class="built_in">console</span>.log(globalVar);　<span class="comment">// overrided var</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(globalVar); <span class="comment">// global var，使用全局变量</span></span><br></pre></td></tr></table></figure><p></p><h1 id="js的this指的是什么？"><a href="#js的this指的是什么？" class="headerlink" title="js的this指的是什么？"></a>js的this指的是什么？</h1><p>参考答案：</p><p>this指的是对象本身，而不是构造函数。</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.sayName() &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); &#125;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.name = <span class="string">'John'</span>;</span><br><span class="line">person.sayName(); <span class="comment">// John</span></span><br></pre></td></tr></table></figure><h1 id="apply，call和bind的区别"><a href="#apply，call和bind的区别" class="headerlink" title="apply，call和bind的区别"></a>apply，call和bind的区别</h1><p>参考答案：</p><p>三者都可以把一个函数应用到其他对象上，注意不是自身对象。</p><p>apply、call是直接执行函数调用，bind是绑定，执行后需要再次调用。</p><p>apply和call的区别是apply接受数组作为参数，而call是接受逗号分隔的无限多个参数列表。</p><p>代码：<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.sayName() &#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); &#125;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">'John'</span>&#125;; <span class="comment">// 注意这是一个普通对象，它不是Person的实例</span></span><br><span class="line"><span class="comment">// 1) apply</span></span><br><span class="line">Person.prototype.sayName.apply(obj, [param1, param2, param3]);</span><br><span class="line">​</span><br><span class="line"><span class="comment">// 2) call</span></span><br><span class="line">Person.prototype.sayName.call(obj, param1, param2, param3);</span><br><span class="line">​</span><br><span class="line"><span class="comment">// 3) bind</span></span><br><span class="line"><span class="keyword">var</span> newFunc = Person.prototype.sayName.bind(obj); </span><br><span class="line">newFunc([param1, param2, param3]); <span class="comment">// bind需要先绑定，再执行 </span></span><br><span class="line">newFunc(param1, param2, param3); <span class="comment">// bind需要先绑定，再执行</span></span><br></pre></td></tr></table></figure><p></p><h1 id="caller，callee和arguments的区别"><a href="#caller，callee和arguments的区别" class="headerlink" title="caller，callee和arguments的区别"></a>caller，callee和arguments的区别</h1><p>参考答案：</p><p>caller，callee之间的关系就像是employer和employee之间的关系，就是调用与被调用的关系，二者返回的都是函数对象引用。</p><p>arguments是函数的所有参数列表，它是一个类数组的变量。</p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params">param1, param2, param3</span>) </span>&#123;</span><br><span class="line">  child(param1, param2, param3);</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// &#123; '0': 'John1', '1': 'John2', '2': 'Joh3' &#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee); <span class="comment">// [Function: child]</span></span><br><span class="line">  <span class="built_in">console</span>.log(child.caller); <span class="comment">// [Function: parent]</span></span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line">parent(<span class="string">'John1'</span>, <span class="string">'John2'</span>, <span class="string">'John3'</span>);</span><br></pre></td></tr></table></figure><h1 id="什么是闭包，它的用处？"><a href="#什么是闭包，它的用处？" class="headerlink" title="什么是闭包，它的用处？"></a>什么是闭包，它的用处？</h1><p>参考答案：</p><p>通俗的说，闭包就是作用域范围，因为js是函数作用域，所以函数就是闭包。</p><p>全局函数的作用域范围就是全局，所以无须讨论。</p><p>更多的应用其实是在内嵌函数，这就会涉及到内嵌作用域，或者叫作用域链。</p><p>说到内嵌，其实就是父子引用关系（父函数包含子函数，子函数因为函数作用域又引用父函数，所以叫闭包），这就会带来另外一个问题，什么时候引用结束？如果不结束，就会一直占用内存，引起内存泄漏。好吧，不用的时候就将引用设为空，死结就解开了。</p><h1 id="defineProperty-hasOwnProperty-propertyIsEnumerable"><a href="#defineProperty-hasOwnProperty-propertyIsEnumerable" class="headerlink" title="defineProperty, hasOwnProperty, propertyIsEnumerable"></a>defineProperty, hasOwnProperty, propertyIsEnumerable</h1><p>参考答案：</p><p>Object.defineProperty(obj, prop, descriptor)用来给对象定义属性，有value，writable，configurable，enumerable，set/get等。</p><p>hasOwnProerty用于检查某一属性是不是存在于对象本身，继承来的属性不算。</p><p>propertyIsEnumerable用来检测某一属性是否可遍历，也就是能不能用for..in循环来取到。</p><h1 id="js常用设计模式"><a href="#js常用设计模式" class="headerlink" title="js常用设计模式"></a>js常用设计模式</h1><p>参考答案：</p><p>单例，工厂，代理，装饰，观察者模式等</p><p>代码：</p><p>1) 单例：任意对象都是单例，无须特别处理，适用场景：如日志等<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br></pre></td></tr></table></figure><p></p><p>2) 工厂：不同参数返回不同的实例，适用场景：根据不同参数产生不同实例，这些实例有一些共性的场景<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.name = <span class="string">'I am a person'</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.name = <span class="string">'I am an animal'</span>; &#125;</span><br><span class="line">​</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Factory</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Factory.prototype.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">'new '</span> + className + <span class="string">'()'</span>);</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">var</span> factory = <span class="keyword">new</span> Factory();</span><br><span class="line"><span class="keyword">var</span> obj1 = factory.getInstance(<span class="string">'Person'</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = factory.getInstance(<span class="string">'Animal'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj1.name); <span class="comment">// I am a person</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.name); <span class="comment">// I am an animal</span></span><br></pre></td></tr></table></figure><p></p><p>3) 代理：就是新建个类调用老类的接口，包一下<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'John'</span>); &#125;</span><br><span class="line">Person.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">27</span>); &#125;</span><br><span class="line">​</span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PersonProxy</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="keyword">this</span>.person = <span class="keyword">new</span> Person();</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">this</span>.callMethod = <span class="function"><span class="keyword">function</span>(<span class="params">functionName</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'before proxy:'</span>, functionName);</span><br><span class="line">    that.person[functionName]();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'after proxy:'</span>, functionName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">var</span> pp = <span class="keyword">new</span> PersonProxy();</span><br><span class="line"><span class="comment">// 代理调用Person的方法sayName()</span></span><br><span class="line">pp.callMethod(<span class="string">'sayName'</span>); </span><br><span class="line"><span class="comment">// 代理调用Person的方法sayAge()</span></span><br><span class="line">pp.callMethod(<span class="string">'sayAge'</span>);</span><br></pre></td></tr></table></figure><p></p><p>4) 观察者: 就是事件模式，比如按钮的onclick这样的应用<br></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Publisher</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.listeners = [];</span><br><span class="line">&#125;</span><br><span class="line">Publisher.prototype = &#123;</span><br><span class="line">  <span class="string">'addListener'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.listeners.push(listener);</span><br><span class="line">  &#125;,</span><br><span class="line">​</span><br><span class="line">  <span class="string">'removeListener'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.listeners[listener];</span><br><span class="line">  &#125;,</span><br><span class="line">​</span><br><span class="line">  <span class="string">'notify'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.listeners.length; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> listener = <span class="keyword">this</span>.listeners[i];</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        listener.process(obj);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line"><span class="comment">// 订阅者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Subscriber</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Subscriber.prototype = &#123;</span><br><span class="line">  <span class="string">'process'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">​</span><br><span class="line"><span class="keyword">var</span> publisher = <span class="keyword">new</span> Publisher();</span><br><span class="line">publisher.addListener(<span class="keyword">new</span> Subscriber());</span><br><span class="line">publisher.addListener(<span class="keyword">new</span> Subscriber());</span><br><span class="line"><span class="comment">// 发布一个对象到所有订阅者</span></span><br><span class="line">publisher.notify(&#123;<span class="attr">name</span>: <span class="string">'John'</span>, <span class="attr">ageo</span>: <span class="number">27</span>&#125;);</span><br><span class="line"><span class="comment">// 发布一个字符串到所有订阅者</span></span><br><span class="line">publisher.notify(<span class="string">'2 subscribers will both perform process'</span>);</span><br></pre></td></tr></table></figure><p></p><h1 id="列举数组的常用方法（入参、返回值、使用方式）"><a href="#列举数组的常用方法（入参、返回值、使用方式）" class="headerlink" title="列举数组的常用方法（入参、返回值、使用方式）"></a>列举数组的常用方法（入参、返回值、使用方式）</h1><p>参考答案：</p><p>push/pop, shift/unshift, join, slice/splice/concat, sort/reverse, map/reduce, forEach, filter</p><h1 id="列举字符串的常用方法（入参、返回值、使用方式）"><a href="#列举字符串的常用方法（入参、返回值、使用方式）" class="headerlink" title="列举字符串的常用方法（入参、返回值、使用方式）"></a>列举字符串的常用方法（入参、返回值、使用方式）</h1><p>参考答案：</p><p>indexOf/lastIndexOf/charAt, split/match/test, slice/substring/substr, toLowerCase/toUpperCase</p><h1 id="ES6有哪些新特性"><a href="#ES6有哪些新特性" class="headerlink" title="ES6有哪些新特性"></a>ES6有哪些新特性</h1><p>参考答案：</p><p>类的支持，模块化，箭头函数，let/const块作用域，字符串模板，解构，参数默认值/不定参数/拓展参数, for-of遍历, generator, Map/Set, Promise</p><h1 id="setTimeout六连击"><a href="#setTimeout六连击" class="headerlink" title="setTimeout六连击"></a>setTimeout六连击</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一击</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 答案： 0 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二击</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">1000</span> * i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 答案： 5 5 5 5 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三击</span></span><br><span class="line"><span class="comment">// 怎么修改输出0 1 2 3 4</span></span><br><span class="line"><span class="comment">// 闭包模式或者Es6的`let`</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, i * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四击</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, i * <span class="number">1000</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 答案： 5 5 5 5 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第五击</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout((<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;)(i), i * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 答案： 0 1 2 3 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第六击</span></span><br><span class="line"><span class="comment">// 考察运行机制</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">10000</span> ; i++ ) &#123;</span><br><span class="line">    i == <span class="number">9999</span> &amp;&amp; resolve();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 答案： 2 3 5 4 1</span></span><br><span class="line"><span class="comment">// 解答：setTimeout属于异步进程任务，会放到任务队列等待执行</span></span><br><span class="line"><span class="comment">// Promise里面是立即执行函数，因此先输出2和3，then则会在当前tick的最后执行，因此会先输出5，再接着输出4，最后输出1</span></span><br></pre></td></tr></table></figure><p>​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不定时更新:-D&lt;/p&gt;&lt;h1 id=&quot;如何定义一个类？&quot;&gt;&lt;a href=&quot;#如何定义一个类？&quot; class=&quot;headerlink&quot; title=&quot;如何定义一个类？&quot;&gt;&lt;/a&gt;如何定义一个类？&lt;/h1&gt;&lt;p&gt;参考答案：&lt;/p&gt;&lt;p&gt;主要有构造函数原型和对象创建两种方法
      
    
    </summary>
    
      <category term="面试题" scheme="https://ebooks4coding.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
      <category term="前端" scheme="https://ebooks4coding.com/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端 面试题" scheme="https://ebooks4coding.com/tags/%E5%89%8D%E7%AB%AF-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>算法学习</title>
    <link href="https://ebooks4coding.com/algrithm/"/>
    <id>https://ebooks4coding.com/algrithm/</id>
    <published>2018-09-13T17:14:00.000Z</published>
    <updated>2018-12-11T13:20:24.877Z</updated>
    
    <content type="html"><![CDATA[<p>不定时更新:-D</p><h1 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h1><ul><li><a href="https://www.zhihu.com/question/22298352?rf=21686447" target="_blank" rel="noopener">如何通俗易懂地解释卷积？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不定时更新:-D&lt;/p&gt;&lt;h1 id=&quot;卷积&quot;&gt;&lt;a href=&quot;#卷积&quot; class=&quot;headerlink&quot; title=&quot;卷积&quot;&gt;&lt;/a&gt;卷积&lt;/h1&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/22298352?
      
    
    </summary>
    
      <category term="算法" scheme="https://ebooks4coding.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://ebooks4coding.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>React 技术栈相关资源</title>
    <link href="https://ebooks4coding.com/react-knowledge/"/>
    <id>https://ebooks4coding.com/react-knowledge/</id>
    <published>2018-08-30T20:47:00.000Z</published>
    <updated>2018-12-11T13:20:24.881Z</updated>
    
    <content type="html"><![CDATA[<p>不定时更新</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h3><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://www.fullstackreact.com/" target="_blank" rel="noopener">fullstackreact</a></td><td>如果只看一个react教程，并且希望全面的了解其生态圈，这本书就够了。</td></tr><tr><td><a href="http://www.reactjsprogram.com/" target="_blank" rel="noopener">reactjsprogram</a></td><td>有几个大的系列(redux/react native等)，其中react基础部分是免费的，内容对初学者来说很优质。</td></tr></tbody></table><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.3tk94s6k0" target="_blank" rel="noopener">Presentational and Container Components</a></td><td>介绍了react中Presentational和Container Components的概念和区别，以及使用场景</td></tr><tr><td><a href="https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html" target="_blank" rel="noopener">React Components, Elements, and Instances</a></td><td>详细介绍了React中令人困惑的Component和Element的区别，以及React底层是如何将Component解析为DOM树的。</td></tr><tr><td><a href="https://medium.com/javascript-inside/learn-the-concepts-part-1-418952d968cb#.6e7z5tvgq" target="_blank" rel="noopener">Learning React Without Using React</a></td><td>作者抛开react库本身，围绕react中的render方法,virtual DOM,Component,单向数据流动等概念，实现了一个todolist的例子，demo虽易，但是思想非常棒。</td></tr><tr><td><a href="http://krasimirtsonev.com/blog/article/react-js-in-design-patterns?utm_campaign=React%2BNewsletter&amp;utm_medium=email&amp;utm_source=React_Newsletter_38" target="_blank" rel="noopener">React.js in patterns</a></td><td>react的设计模式</td></tr><tr><td><a href="https://leozdgao.me/chushi-hoc/" target="_blank" rel="noopener">初识React中的High Order Component</a></td><td>介绍了react中的高阶组件，通俗易懂，顺带还提了下react-redux中的connect的实现。</td></tr><tr><td><a href="https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.4twzbtufq" target="_blank" rel="noopener">React Higher Order Components in depth</a></td><td>介绍了高阶组件(HOC)的两种实现方式，以及如何通过它来重用代码、操作WrappedComponent的props/state，render劫持等等。</td></tr><tr><td><a href="https://tylermcginnis.com/react-interview-questions/" target="_blank" rel="noopener">react-interview-questions</a></td><td>react相关的”面试题”, 很有意思</td></tr><tr><td><a href="http://cloudinary.com/blog/how_to_develop_a_react_library?utm_campaign=React%2BNewsletter&amp;utm_medium=email&amp;utm_source=React_Newsletter_59" target="_blank" rel="noopener">How to develop a React library</a></td><td>介绍了如何开发一个react相关的库(组件)，便于其他开发者集成到自己的应用中</td></tr></tbody></table><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><h3 id="教程-1"><a href="#教程-1" class="headerlink" title="教程"></a>教程</h3><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html" target="_blank" rel="noopener">Full-Stack Redux Tutorial</a></td><td>这是一篇博客文章，内容相当的多，作者从零搭建了一个实时投票系统，从服务端到浏览器前端，介绍了如何使用<a href="https://mochajs.org/" target="_blank" rel="noopener">mocha</a>,<a href="http://chaijs.com/" target="_blank" rel="noopener">chai</a>进行功能测试，如何使用<a href="https://github.com/facebook/immutable-js" target="_blank" rel="noopener">Immutable.js</a>，以及如何进行react组件的测试。作者在整篇文章中，一点点引入redux中的概念，深入浅出。还有一点非常有意思的是，作者在前后端分别建立了个redux。</td></tr></tbody></table><h3 id="文章-1"><a href="#文章-1" class="headerlink" title="文章"></a>文章</h3><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://blog.boldlisting.com/so-youve-screwed-up-your-redux-store-or-why-redux-makes-refactoring-easy-400e19606c71?utm_campaign=React%2BNewsletter&amp;utm_medium=email&amp;utm_source=React_Newsletter_32#.1po5f1k30" target="_blank" rel="noopener">so-youve-screwed-up-your-redux-store-or-why-redux-makes-refactoring-easy</a></td><td>主要讲述了对reducers的几种改进方式来对redux进行重构。</td></tr><tr><td><a href="https://www.youtube.com/watch?v=uvAXVMwHJXU&amp;feature=youtu.be" target="_blank" rel="noopener">The Redux Journey</a></td><td>Dan在react-europe 2016上关于redux一年发展过程的总结，并且示范了如何使用redux的优秀特性。</td></tr></tbody></table><h2 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h2><h3 id="文章-2"><a href="#文章-2" class="headerlink" title="文章"></a>文章</h3><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://andrewhfarmer.com/what-are-css-modules/" target="_blank" rel="noopener">What are CSS Modules? A visual introduction</a></td><td>介绍了什么是css modules，以及它是如何解决css global问题的。</td></tr><tr><td><a href="http://andrewhfarmer.com/css-modules-by-example" target="_blank" rel="noopener">CSS Modules by Example</a></td><td>7个例子涵盖了css modules在React开发中使用的场景。</td></tr></tbody></table><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><h3 id="文章-3"><a href="#文章-3" class="headerlink" title="文章"></a>文章</h3><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://www.cnblogs.com/ihardcoder/p/5623411.html" target="_blank" rel="noopener">Webpack中hash与chunkhash的区别，以及js与css的hash指纹解耦方案</a></td><td>比较深入的介绍了hash和chunkhash的一些东西</td></tr><tr><td><a href="https://medium.com/@lavrton/progressive-loading-for-modern-web-applications-via-code-splitting-fb43999735c6#.yi8ev5c95" target="_blank" rel="noopener">Progressive loading for modern web applications via code splitting</a></td><td>介绍了如何使用require.ensure来实现code-split，同时实现延迟加载。</td></tr></tbody></table><h3 id="教程-2"><a href="#教程-2" class="headerlink" title="教程"></a>教程</h3><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://survivejs.com/webpack/introduction/" target="_blank" rel="noopener">http://survivejs.com/webpack/introduction/</a></td><td>目前看过最全面，也是唯一一本专门介绍webpack的书（webpack是个巨坑＝＝）。</td></tr><tr><td><a href="https://frontendmasters.com/courses/webpack" target="_blank" rel="noopener">Webpack Deep Dive</a></td><td>深入介绍如何在项目中使用webpack2。视频是workshop上录制的，有现场讲师和学生的提问互动，非常赞。</td></tr></tbody></table><h2 id="GraphQL-amp-amp-Relay"><a href="#GraphQL-amp-amp-Relay" class="headerlink" title="GraphQL &amp;&amp; Relay"></a>GraphQL &amp;&amp; Relay</h2><h3 id="教程-3"><a href="#教程-3" class="headerlink" title="教程"></a>教程</h3><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="https://learngraphql.com" target="_blank" rel="noopener">https://learngraphql.com</a></td><td>非常详细的介绍了graphql的基础用法，很好的入门教程。</td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://flexbox.io/" target="_blank" rel="noopener">http://flexbox.io/</a></td><td>flexbox视频教程，共20个小视频，前13小节讲述了flexbox的各种属性，后7小节实例演示。</td></tr><tr><td><a href="https://www.manning.com/books/functional-programming-in-javascript" target="_blank" rel="noopener">Functional Programming in JavaScript</a></td><td>React生态圈中到处透露着函数式编程的思想，这本书对于函数式编程接触较少的人来说内容非常丰富，并且一些地方讲的比较深入，适合多次阅读。</td></tr><tr><td><a href="http://reactivex.io/learnrx/" target="_blank" rel="noopener">learnrx</a></td><td>前面章节讲了大量的函数式思想(其实就是map,filter,reduce,concatAll,concatMap这五个函数啦)，后面引入Rx，并和数组进行对比，讲解Observable和array有什么联系和区别。</td></tr></tbody></table><h2 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h2><table><thead><tr><th>问题</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559" target="_blank" rel="noopener">How to dispatch a Redux action with a timeout?</a></td><td>回答者是Redux的作者，阐述了如何在Redux中进行异步操作，什么情况下需要对异步操作进行封装，以及redux-thunk中间件的使用。</td></tr><tr><td><a href="https://www.reddit.com/r/reactjs/comments/4mjdcf/why_cant_i_put_key_in_default_props_or_define_the/d3xwa6m" target="_blank" rel="noopener">Why is ‘key’ needed?</a></td><td>解释了为什么在一个React Elements数组中需要指定每个元素的key属性。</td></tr><tr><td><a href="https://stackoverflow.com/questions/28858176/what-does-webpack-mean-by-xx-hidden-modules" target="_blank" rel="noopener">what-does-webpack-mean-by-xx-hidden-modules</a></td><td>webpack运行时,控制台出现+n hidden modules的原因。</td></tr></tbody></table><h2 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h2><ul><li><a href="https://segmentfault.com/a/1190000006741060" target="_blank" rel="noopener">React PureComponent 源码解析</a></li><li><a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="noopener">深度剖析：如何实现一个 Virtual DOM 算法</a></li><li><a href="https://facebook.github.io/react/contributing/implementation-notes.html" target="_blank" rel="noopener">React: Implementation Notes</a></li><li><a href="http://purplebamboo.github.io/2015/09/15/reactjs_source_analyze_part_one/" target="_blank" rel="noopener">reactjs源码分析-上篇（首次渲染实现原理）</a></li><li><a href="http://reactkungfu.com/2015/12/dive-into-react-codebase-transactions/" target="_blank" rel="noopener">dive-into-react-codebase-transactions</a></li><li><a href="https://zhuanlan.zhihu.com/p/20328570" target="_blank" rel="noopener">React 源码剖析系列 － 解密 setState</a></li></ul><h2 id="Newsletter"><a href="#Newsletter" class="headerlink" title="Newsletter"></a>Newsletter</h2><ul><li><a href="http://reactjsnewsletter.com/" target="_blank" rel="noopener">http://reactjsnewsletter.com/</a></li><li><a href="http://newsletter.fullstackreact.com/" target="_blank" rel="noopener">http://newsletter.fullstackreact.com/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不定时更新&lt;/p&gt;&lt;h2 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h2&gt;&lt;h3 id=&quot;教程&quot;&gt;&lt;a href=&quot;#教程&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="前端" scheme="https://ebooks4coding.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://ebooks4coding.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>7 Hacks for ES6 Developers</title>
    <link href="https://ebooks4coding.com/es6-hacks/"/>
    <id>https://ebooks4coding.com/es6-hacks/</id>
    <published>2018-08-24T20:42:00.000Z</published>
    <updated>2018-12-11T13:20:24.881Z</updated>
    
    <content type="html"><![CDATA[<p>7 Hacks for ES6 Developers</p><h1 id="Hack-1-—-Swap-variables"><a href="#Hack-1-—-Swap-variables" class="headerlink" title="Hack #1 — Swap variables"></a>Hack #1 — Swap variables</h1><p>Using Array Destructuring to swap values</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">'world'</span>, b = <span class="string">'hello'</span></span><br><span class="line">[a, b] = [b, a]</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// -&gt; hello</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// -&gt; world</span></span><br><span class="line"><span class="comment">// Yes, it's magic</span></span><br></pre></td></tr></table></figure><h1 id="Hack-2-—-Async-Await-with-Destructuring"><a href="#Hack-2-—-Async-Await-with-Destructuring" class="headerlink" title="Hack #2 — Async/Await with Destructuring"></a>Hack #2 — Async/Await with Destructuring</h1><p>Once again, Array Destructuring is great. Combined with async/await and promises to make a complex flow — simple.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [user, account] = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">  fetch(<span class="string">'/user'</span>),</span><br><span class="line">  fetch(<span class="string">'/account'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h1 id="Hack-3-—-Debugging"><a href="#Hack-3-—-Debugging" class="headerlink" title="Hack #3 — Debugging"></a>Hack #3 — Debugging</h1><p>For anyone who likes to debug using console.logs, here’s something awesome (and yes, I heard of console.table):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">5</span>, b = <span class="number">6</span>, c = <span class="number">7</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123; a, b, c &#125;)</span><br><span class="line"><span class="comment">// outputs this nice object:</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//    a: 5,</span></span><br><span class="line"><span class="comment">//    b: 6,</span></span><br><span class="line"><span class="comment">//    c: 7</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h1 id="Hack-4-—-One-liners"><a href="#Hack-4-—-One-liners" class="headerlink" title="Hack #4 — One liners"></a>Hack #4 — One liners</h1><p>Syntax can be so much more compact for array operations</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find max value</span></span><br><span class="line"><span class="keyword">const</span> max = <span class="function">(<span class="params">arr</span>) =&gt;</span> <span class="built_in">Math</span>.max(...arr);</span><br><span class="line">max([<span class="number">123</span>, <span class="number">321</span>, <span class="number">32</span>]) <span class="comment">// outputs: 321</span></span><br><span class="line"><span class="comment">// Sum array</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">arr</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> (a + b), <span class="number">0</span>)</span><br><span class="line">sum([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// output: 10</span></span><br></pre></td></tr></table></figure><h1 id="Hack-5-—-Array-concatenation"><a href="#Hack-5-—-Array-concatenation" class="headerlink" title="Hack #5 — Array concatenation"></a>Hack #5 — Array concatenation</h1><p>The spread operator can be used instead of concat:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> one = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">const</span> two = [<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line"><span class="keyword">const</span> three = [<span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>]</span><br><span class="line"><span class="comment">// Old way #1</span></span><br><span class="line"><span class="keyword">const</span> result = one.concat(two, three)</span><br><span class="line"><span class="comment">// Old way #2</span></span><br><span class="line"><span class="keyword">const</span> result = [].concat(one, two, three)</span><br><span class="line"><span class="comment">// New</span></span><br><span class="line"><span class="keyword">const</span> result = [...one, ...two, ...three]</span><br></pre></td></tr></table></figure><h1 id="Hack-6-—-Cloning"><a href="#Hack-6-—-Cloning" class="headerlink" title="Hack #6 — Cloning"></a>Hack #6 — Cloning</h1><p>Clone arrays and objects with ease:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; ...oldObj &#125;</span><br><span class="line"><span class="keyword">const</span> arr = [ ...oldArr ]</span><br><span class="line">Note: This creates a shallow clone.</span><br></pre></td></tr></table></figure><h1 id="Hack-7-—-Named-parameters"><a href="#Hack-7-—-Named-parameters" class="headerlink" title="Hack #7 — Named parameters"></a>Hack #7 — Named parameters</h1><p>Making function and function calls more readable with destructuring:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getStuffNotBad = <span class="function">(<span class="params">id, force, verbose</span>) =&gt;</span> &#123;</span><br><span class="line">  ...do stuff</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getStuffAwesome = <span class="function">(<span class="params">&#123; id, name, force, verbose &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  ...do stuff</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Somewhere else in the codebase... WTF is true, true?</span></span><br><span class="line">getStuffNotBad(<span class="number">150</span>, <span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// Somewhere else in the codebase... I ❤ JS!!!</span></span><br><span class="line">getStuffAwesome(&#123; <span class="attr">id</span>: <span class="number">150</span>, <span class="attr">force</span>: <span class="literal">true</span>, <span class="attr">verbose</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;7 Hacks for ES6 Developers&lt;/p&gt;&lt;h1 id=&quot;Hack-1-—-Swap-variables&quot;&gt;&lt;a href=&quot;#Hack-1-—-Swap-variables&quot; class=&quot;headerlink&quot; title=&quot;Hack #1 — Swa
      
    
    </summary>
    
      <category term="前端" scheme="https://ebooks4coding.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://ebooks4coding.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>If...Else, or not</title>
    <link href="https://ebooks4coding.com/js-if-else-or-not/"/>
    <id>https://ebooks4coding.com/js-if-else-or-not/</id>
    <published>2018-07-28T14:07:00.000Z</published>
    <updated>2018-12-11T13:20:24.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>或许编程中最最经典的特性就是条件语句了。但当我开始回避它，我发现我自己写出来的代码更加合理且整洁。</p><p>回避条件语句的办法就是降低圈复杂度！（圈复杂度就不赘述了，大家看参考文献即可）</p><p>我们在React项目中，遇到特别多的If…Else语句。</p><p>而自从引入了Eslint圈复杂度检测，确实重构了特别多的If…Else。</p><p>重构后代码的可读性更好了，也更加合理。</p><p>因此也对此十分热衷，我想圈复杂度过高说明你的代码并不健康，是时候对它进行体检和重构了。</p><h1 id="实战经验"><a href="#实战经验" class="headerlink" title="实战经验"></a>实战经验</h1><p>当我在Code Review时看到很多条件语句，这时应该怎么做呢？我是这样考虑的：</p><p>这个功能实际上是在做不同的事情，而应该分成不同的功能吗？</p><p>是否确实有必要在这个功能中检查此条件，还是应该由其他地方负责呢？</p><p>可以用更易读的方式完成吗？有不同的模式可以替换条件，我最喜欢的模式之一是对象映射模式。</p><p>如果我们必须使用条件。我会删除Else，只保留If和默认情况。</p><p>现在，让我们一起来研究下一些处理不同类型条件语句的办法吧！</p><h2 id="移除Else"><a href="#移除Else" class="headerlink" title="移除Else"></a>移除Else</h2><p>这是一个相当简单的办法，但很实用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (red) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (blue) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (red || blue) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>我喜欢第二种方式，原因有二：</p><p>有一个default语句，如果if语句不被满足，则可以很清楚的知道返回结果</p><p>功能一样，但代码少，可读性强</p><h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>如果你理解你的功能确实是做着不同的事情，那么可以使用一个很棒的模式——组合。</p><p>你需要将这个功能分成更小的、更细致的功能，然后将他们组合在一起。</p><p>这样的话，你可以自己创建一组可在应用的不同地方去使用的通用功能。</p><p>光说不练嘴把戏，这就来个栗子🌰：假如我们有个需求，要获取年龄超过30且怀孕着的女员工</p><p>我们的代码会长这样：</p><p>代码块<br>JavaScript<br>import { flow } from ‘lodash’;<br>const femaleEmployeesOverThirtyAndPregnant = flow(<br>getFemales,<br>getEmployeesOverThirty,<br>getEmployeesPregnant,<br>)(employees);<br>我们可以很容易看出，上述的每个方法都是可以在不同地方去复用的。</p><h2 id="对象映射"><a href="#对象映射" class="headerlink" title="对象映射"></a>对象映射</h2><p>这是我最喜欢的模式。</p><p>它确实可以在很多不同情况下使用，不管前端编程还是后端编程。</p><p>最大的好处当然是它够简单，可读性强。</p><p>当我使用它时，我感觉我不是在写代码而更像是在写说明文档。</p><p>上菜：2.1的代码换了个新衣裳👗</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> colors = &#123;</span><br><span class="line">  red: <span class="literal">true</span>,</span><br><span class="line">  blue: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="keyword">const</span> colorMapper = <span class="function"><span class="params">color</span> =&gt;</span> colors[color] || colors.default;</span><br><span class="line"><span class="keyword">const</span> color = colorMapper(item.color);</span><br></pre></td></tr></table></figure><p>它是这样工作的：</p><ul><li>一个具体说明结果的对象</li><li>一个映射函数</li></ul><p>有一个default结果是十分好的。因为如果我们没传参数或参数为空，这个方法仍然可以工作。</p><p>比如我们这样使用：colorMapper(‘green’)，我们将得到一个默认值为false的结果。但后面我们可以在之后添加新的数据进去，十分方便。</p><p>我们也可使用switch语句来得到同样的结果，但这样并不能降低圈复杂度。相比switch语句，对象映射模式更加纯净而优雅。</p><h2 id="对象映射和React"><a href="#对象映射和React" class="headerlink" title="对象映射和React"></a>对象映射和React</h2><p>在React中，这个模式真的很棒。</p><p>又来一颗例子🌰：假设我们想要将一个数组渲染出不同的组件。我们的数据格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> items = [&#123;</span><br><span class="line"> type: ‘hero’,</span><br><span class="line"> content: : &#123;…&#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line"> type: <span class="string">'text'</span>,</span><br><span class="line"> content: : &#123;…&#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line"> type: <span class="string">'image_and_text'</span>,</span><br><span class="line"> content: : &#123;…&#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line"> type: <span class="string">'text'</span>,</span><br><span class="line"> content: : &#123;…&#125;,</span><br><span class="line">&#125;, &#123;</span><br><span class="line"> type: <span class="string">'call_to_action'</span>,</span><br><span class="line"> content: : &#123;…&#125;,</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>数组中每个对象都有type和content属性。</p><p>我们写一个映射函数，每一个key对应上述对象中的type，值为一个特定的组件。这个组件，只接受一个属性为content。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> components = &#123;</span><br><span class="line"> hero: HeroComponent,</span><br><span class="line"> text: TextComponent,</span><br><span class="line"> image_and_text: ImageAndTextComponent,</span><br><span class="line"> call_to_action: CallToActionComponent,</span><br><span class="line"> <span class="keyword">default</span>: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> componentMapper = <span class="function"><span class="params">type</span> =&gt;</span> </span><br><span class="line">components[type] || components.default;</span><br></pre></td></tr></table></figure><p>然后我们就可以在React应用中这样用了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> react <span class="keyword">from</span> ‘react’;</span><br><span class="line"><span class="keyword">const</span> RenderItems = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">const</span> componentList = props.items(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> Component = componentMapper(item.type);</span><br><span class="line">   <span class="keyword">return</span> &lt;Component content=&#123;item.content&#125; /&gt;</span><br><span class="line"> &#125;;</span><br><span class="line"> return (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &#123;componentList&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"> )</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里的一个好处是，如果我们的内容来自外部源，并且有人添加了新模块。它将只渲染出null，并且什么都不会中断。我们稍后可以在我们的映射对象中添加一个新组件。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>可能有更多不同的模式和方法可用于对抗代码中的Ifs和Elses。</p><p>但这只是我发现最有用的几种方法。</p><p>如果你发现新的，还请不吝赐教！！！</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://medium.com/front-end-hacking/become-a-functional-javascript-hero-945e72c15bff" target="_blank" rel="noopener">become-a-functional-javascript-hero</a></p><p><a href="https://lodash.com/docs/4.17.10#flow" target="_blank" rel="noopener">lodash/flow</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;或许编程中最最经典的特性就是条件语句了。但当我开始回避它，我发现我自己写出来的代码更加合理且整洁。&lt;/p&gt;&lt;p&gt;回避条件语句的办法就是降低圈
      
    
    </summary>
    
      <category term="前端" scheme="https://ebooks4coding.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://ebooks4coding.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>数组常用方法总结</title>
    <link href="https://ebooks4coding.com/js-array/"/>
    <id>https://ebooks4coding.com/js-array/</id>
    <published>2018-07-28T14:07:00.000Z</published>
    <updated>2018-12-11T13:20:24.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Array-length"><a href="#Array-length" class="headerlink" title="Array.length"></a>Array.length</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>返回或设置一个数组中的元素个数</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>设置 length 属性值会截断数组</p><h1 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayLike[, mapFn[, thisArg]])</span><br></pre></td></tr></table></figure><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><p>将伪数组或可迭代对象（如 arguments、map、set、string…）转换成数组对象</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>arrayLike</code><br>想要转换成数组的伪数组对象或可迭代对象。<br><code>mapFn (可选参数)</code><br>如果指定了该参数，新数组中的每个元素会执行该回调函数。<br><code>thisArg (可选参数)</code><br>可选参数，执行回调函数 mapFn 时 this 对象。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="string">"foo"</span>);</span><br><span class="line"><span class="comment">// ["f", "o", "o"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"foo"</span>, <span class="built_in">window</span>]);</span><br><span class="line"><span class="built_in">Array</span>.from(s);</span><br><span class="line"><span class="comment">// ["foo", window]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">8</span>]]);</span><br><span class="line"><span class="built_in">Array</span>.from(m);</span><br><span class="line"><span class="comment">// [[1, 2], [2, 4], [4, 8]]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], x =&gt; x + x);</span><br><span class="line"><span class="comment">// [2, 4, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">5</span> &#125;, (v, i) =&gt; i);</span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组去重合并</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//没有去重复的新数组</span></span><br><span class="line">  <span class="keyword">let</span> arr = [].concat.apply([], <span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">  n = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(combine(m, n));</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h1 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h1><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray(obj);</span><br></pre></td></tr></table></figure><h2 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h2><p>用于确定传递的值是否是一个 Array</p><h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><p>obj，需要检测的值。</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>如果对象是 Array，则为 true; 否则为 false。</p><h1 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h1><h2 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h2><p>创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型</p><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(element0[, element1[, ...[, elementN]]])</span><br></pre></td></tr></table></figure><h2 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h2><p>elementN，任意个参数，将按顺序成为返回数组中的元素。</p><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><p>新的 Array 实例。</p><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个长度为 7 的空数组</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">7</span>); <span class="comment">// [7]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="literal">undefined</span>); <span class="comment">// [undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">7</span>); <span class="comment">// [ , , , , , , ]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h1 id="Array-concat"><a href="#Array-concat" class="headerlink" title="Array.concat()"></a>Array.concat()</h1><h2 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h2><p>用于合并两个或多个数组</p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = old_array.concat(value1[, value2[, ...[, valueN]]])</span><br></pre></td></tr></table></figure><h2 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h2><p>valueN，将数组和/或值连接成新数组。</p><h2 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h2><p>新的 Array 实例。</p><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 连接三个数组</span></span><br><span class="line"><span class="keyword">var</span> num1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  num2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">  num3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> nums = num1.concat(num2, num3);</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br><span class="line"><span class="comment">// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并嵌套数组</span></span><br><span class="line"><span class="comment">// 以下代码合并数组并保留引用：</span></span><br><span class="line"><span class="keyword">var</span> num1 = [[<span class="number">1</span>]];</span><br><span class="line"><span class="keyword">var</span> num2 = [<span class="number">2</span>, [<span class="number">3</span>]];</span><br><span class="line"><span class="keyword">var</span> nums = num1.concat(num2);</span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br><span class="line"><span class="comment">// results in [[1], 2, [3]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// modify the first element of num1</span></span><br><span class="line">num1[<span class="number">0</span>].push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br><span class="line"><span class="comment">// results in [[1, 4], 2, [3]]</span></span><br></pre></td></tr></table></figure><h1 id="Array-copyWithin"><a href="#Array-copyWithin" class="headerlink" title="Array.copyWithin()"></a>Array.copyWithin()</h1><h2 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h2><p>浅复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小。</p><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.copyWithin(target[, start[, end]])</span><br></pre></td></tr></table></figure><h2 id="参数-4"><a href="#参数-4" class="headerlink" title="参数"></a>参数</h2><p>target，0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。<br>如果 target 大于等于 arr.length，将会不发生拷贝。如果 target 在 start 之后，复制的序列将被修改以符合 arr.length。<br>start，0 为基底的索引，开始复制元素的起始位置。如果是负数，start 将从末尾开始计算。<br>如果 start 被忽略，copyWithin 将会从 0 开始复制。<br>end，0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。<br>如果 end 被忽略，copyWithin 将会复制到 arr.length。</p><h2 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h2><p>改变了的数组。</p><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">-2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 1, 2]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 3, 4]</span></span><br><span class="line"></span><br><span class="line">[].copyWithin.call(&#123; <span class="attr">length</span>: <span class="number">5</span>, <span class="number">3</span>: <span class="number">1</span> &#125;, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES2015 Typed Arrays are subclasses of Array</span></span><br><span class="line"><span class="keyword">var</span> i32a = <span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line">i32a.copyWithin(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// Int32Array [3, 4, 5, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// On platforms that are not yet ES2015 compliant:</span></span><br><span class="line">[].copyWithin.call(<span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// Int32Array [4, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h1 id="Array-entries"><a href="#Array-entries" class="headerlink" title="Array.entries()"></a>Array.entries()</h1><h2 id="作用-6"><a href="#作用-6" class="headerlink" title="作用"></a>作用</h2><p>返回一个新的 Array Iterator 对象，该对象包含数组中每个索引的键/值对。</p><h2 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.entries();</span><br></pre></td></tr></table></figure><h2 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h2><p>一个新的 Array 迭代器对象。Array Iterator 是对象，它的原型（<strong>proto</strong>:Array Iterator）上有一个 next 方法，可用用于遍历迭代器取得原数组的[key,value]。</p><h1 id="Array-every"><a href="#Array-every" class="headerlink" title="Array.every()"></a>Array.every()</h1><p>测试数组的所有元素是否都通过了指定函数的测试。</p><h2 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.every(callback[, thisArg])</span><br></pre></td></tr></table></figure><h2 id="参数-5"><a href="#参数-5" class="headerlink" title="参数"></a>参数</h2><p><code>callback</code><br>用来测试每个元素的函数。<br><code>thisArg</code><br>执行 callback 时使用的 this 值。</p><h1 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> passed = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough);</span><br><span class="line"><span class="comment">// passed is false</span></span><br><span class="line">passed = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough);</span><br><span class="line"><span class="comment">// passed is true</span></span><br></pre></td></tr></table></figure><h1 id="Array-fill"><a href="#Array-fill" class="headerlink" title="Array.fill()"></a>Array.fill()</h1><h2 id="作用-7"><a href="#作用-7" class="headerlink" title="作用"></a>作用</h2><p>用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。</p><h2 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h2><p>arr.fill(value[, start[, end]])</p><h2 id="参数-6"><a href="#参数-6" class="headerlink" title="参数"></a>参数</h2><p><code>value</code><br>用来填充数组元素的值。<br><code>start 可选</code><br>起始索引，默认值为 0。<br><code>end 可选</code><br>终止索引，默认值为 this.length。</p><h2 id="返回值-5"><a href="#返回值-5" class="headerlink" title="返回值"></a>返回值</h2><p>修改后的数组。</p><h2 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>); <span class="comment">// [4, 4, 4]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>); <span class="comment">// [1, 4, 4]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// [1, 4, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">-3</span>, <span class="number">-2</span>); <span class="comment">// [4, 2, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">4</span>); <span class="comment">// [4, 4, 4]</span></span><br><span class="line">[].fill.call(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;, <span class="number">4</span>); <span class="comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Objects by reference.</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>(<span class="number">3</span>).fill(&#123;&#125;); <span class="comment">// [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span></span><br><span class="line">arr[<span class="number">0</span>].hi = <span class="string">"hi"</span>; <span class="comment">// [&#123; hi: "hi" &#125;, &#123; hi: "hi" &#125;, &#123; hi: "hi" &#125;]</span></span><br></pre></td></tr></table></figure><h1 id="Array-filter"><a href="#Array-filter" class="headerlink" title="Array.filter()"></a>Array.filter()</h1><h2 id="作用-8"><a href="#作用-8" class="headerlink" title="作用"></a>作用</h2><p>创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</p><h2 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> new_array = arr.filter(callback(element[, index[, array]])[, thisArg])</span><br></pre></td></tr></table></figure><h2 id="参数-7"><a href="#参数-7" class="headerlink" title="参数"></a>参数</h2><p><code>callback</code><br>用来测试数组的每个元素的函数。调用时使用参数 (element, index, array)。<br>返回 true 表示保留该元素（通过测试），false 则不保留。它接受三个参数：<br><code>element</code><br>当前在数组中处理的元素<br><code>index（可选）</code><br>正在处理元素在数组中的索引<br><code>array（可选）</code><br>调用了 filter 筛选器的数组<br><code>thisArg（可选）</code><br>可选。执行 callback 时的用于 this 的值。</p><h2 id="返回值-6"><a href="#返回值-6" class="headerlink" title="返回值"></a>返回值</h2><p>一个新的通过测试的元素的集合的数组，如果没有通过测试则返回空数组</p><h1 id="Array-find"><a href="#Array-find" class="headerlink" title="Array.find()"></a>Array.find()</h1><h2 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.find(callback[, thisArg])</span><br></pre></td></tr></table></figure><h2 id="参数-8"><a href="#参数-8" class="headerlink" title="参数"></a>参数</h2><p><code>callback</code><br>在数组每一项上执行的函数，接收 3 个参数：<br><code>element</code><br>当前遍历到的元素。<br><code>index</code><br>当前遍历到的索引。<br><code>array</code><br>数组本身。<br><code>thisArg 可选</code><br>可选，指定 callback 的 this 参数。</p><h2 id="返回值-7"><a href="#返回值-7" class="headerlink" title="返回值"></a>返回值</h2><p>当某个元素通过 callback 的测试时，返回数组中的一个值，否则返回 undefined。</p><h2 id="示例-6"><a href="#示例-6" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inventory = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"apples"</span>, <span class="attr">quantity</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"bananas"</span>, <span class="attr">quantity</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"cherries"</span>, <span class="attr">quantity</span>: <span class="number">5</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findCherries</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruit.name === <span class="string">"cherries"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(inventory.find(findCherries)); <span class="comment">// &#123; name: 'cherries', quantity: 5 &#125;</span></span><br></pre></td></tr></table></figure><h1 id="Array-findIndex"><a href="#Array-findIndex" class="headerlink" title="Array.findIndex()"></a>Array.findIndex()</h1><h2 id="作用-9"><a href="#作用-9" class="headerlink" title="作用"></a>作用</h2><p>返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。</p><h2 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.findIndex(callback[, thisArg])</span><br></pre></td></tr></table></figure><h2 id="参数-9"><a href="#参数-9" class="headerlink" title="参数"></a>参数</h2><p><code>callback</code><br>针对数组中的每个元素, 都会执行该回调函数, 执行时会自动传入下面三个参数:<br><code>element</code><br>当前元素。<br><code>index</code><br>当前元素的索引。<br><code>array</code><br>调用 findIndex 的数组。<br><code>thisArg</code><br>可选。执行 callback 时作为 this 对象的值.</p><h2 id="示例-7"><a href="#示例-7" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findFirstLargeNumber</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1.findIndex(findFirstLargeNumber));</span><br><span class="line"><span class="comment">// expected output: 3</span></span><br></pre></td></tr></table></figure><h1 id="Array-flat"><a href="#Array-flat" class="headerlink" title="Array.flat()"></a>Array.flat()</h1><h2 id="作用-10"><a href="#作用-10" class="headerlink" title="作用"></a>作用</h2><p>会递归到指定深度将所有子数组连接，并返回一个新数组。（存在兼容性）</p><h2 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArray = arr.flat(depth);</span><br></pre></td></tr></table></figure><h2 id="参数-10"><a href="#参数-10" class="headerlink" title="参数"></a>参数</h2><p><code>depth 可选</code><br>指定嵌套数组中的结构深度，默认值为 1。</p><h2 id="返回值-8"><a href="#返回值-8" class="headerlink" title="返回值"></a>返回值</h2><p>一个将子数组连接的新数组.</p><h2 id="示例-8"><a href="#示例-8" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扁平化嵌套数组</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line">arr1.flat();</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]];</span><br><span class="line">arr2.flat();</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容性（自己实现）</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, [<span class="string">"b"</span>, <span class="string">"c"</span>, [<span class="string">"e"</span>, <span class="string">"f"</span>]]];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flat</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rtnArr = [];</span><br><span class="line">  <span class="keyword">var</span> flatter = <span class="function"><span class="keyword">function</span>(<span class="params">$val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray($val)) &#123;</span><br><span class="line">      rtnArr.push($val);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> $val) flatter($val[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  arr.forEach(flatter);</span><br><span class="line">  <span class="keyword">return</span> rtnArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> output = flat(arr);</span><br><span class="line"><span class="built_in">console</span>.log(output);</span><br></pre></td></tr></table></figure><h1 id="Array-forEach"><a href="#Array-forEach" class="headerlink" title="Array.forEach()"></a>Array.forEach()</h1><h2 id="作用-11"><a href="#作用-11" class="headerlink" title="作用"></a>作用</h2><p>对数组的每个元素执行一次提供的函数。</p><h2 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(callback(currentValue, index, array)&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;, thisArg)</span><br></pre></td></tr></table></figure><h2 id="参数-11"><a href="#参数-11" class="headerlink" title="参数"></a>参数</h2><p><code>callback</code><br>为数组中每个元素执行的函数，该函数接收三个参数：<br><code>currentValue(当前值)</code><br>数组中正在处理的当前元素。<br><code>index(索引)</code><br>数组中正在处理的当前元素的索引。<br><code>array</code><br>forEach()方法正在操作的数组。<br><code>thisArg可选</code><br>可选参数。当执行回调 函数时用作this的值(参考对象)。</p><h2 id="返回值-9"><a href="#返回值-9" class="headerlink" title="返回值"></a>返回值</h2><p>undefined.</p><h1 id="Array-includes"><a href="#Array-includes" class="headerlink" title="Array.includes()"></a>Array.includes()</h1><h2 id="作用-12"><a href="#作用-12" class="headerlink" title="作用"></a>作用</h2><p>用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。</p><h2 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.includes(searchElement)</span><br><span class="line">arr.includes(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><h2 id="参数-12"><a href="#参数-12" class="headerlink" title="参数"></a>参数</h2><p><code>searchElement</code><br>需要查找的元素值 。<br><code>fromIndex 可选</code><br>从该索引处开始查找 searchElement。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜索。默认为 0。</p><h2 id="返回值-10"><a href="#返回值-10" class="headerlink" title="返回值"></a>返回值</h2><p>一个 Boolean。</p><h2 id="示例-9"><a href="#示例-9" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>);     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>);     <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log([].includes.call(<span class="built_in">arguments</span>, <span class="string">'a'</span>)); <span class="comment">// true</span></span><br><span class="line">  <span class="built_in">console</span>.log([].includes.call(<span class="built_in">arguments</span>, <span class="string">'d'</span>)); <span class="comment">// false</span></span><br><span class="line">&#125;)(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);</span><br></pre></td></tr></table></figure><h1 id="Array-indexOf"><a href="#Array-indexOf" class="headerlink" title="Array.indexOf()"></a>Array.indexOf()</h1><h2 id="作用-13"><a href="#作用-13" class="headerlink" title="作用"></a>作用</h2><p>返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p><h2 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.indexOf(searchElement)</span><br><span class="line">arr.indexOf(searchElement[, fromIndex = <span class="number">0</span>])</span><br></pre></td></tr></table></figure><h2 id="参数-13"><a href="#参数-13" class="headerlink" title="参数"></a>参数</h2><p><code>searchElement</code><br>要查找的元素值。<br><code>fromIndex 可选</code><br>开始查找的位置。</p><h2 id="返回值-11"><a href="#返回值-11" class="headerlink" title="返回值"></a>返回值</h2><p>首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1。</p><h2 id="示例-10"><a href="#示例-10" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line">array.indexOf(<span class="number">2</span>);     <span class="comment">// 0</span></span><br><span class="line">array.indexOf(<span class="number">7</span>);     <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h1 id="Array-join"><a href="#Array-join" class="headerlink" title="Array.join()"></a>Array.join()</h1><h2 id="作用-14"><a href="#作用-14" class="headerlink" title="作用"></a>作用</h2><p>将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。</p><h2 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str = arr.join()</span><br><span class="line"><span class="comment">// 默认为 ","</span></span><br><span class="line"></span><br><span class="line">str = arr.join(<span class="string">""</span>)</span><br><span class="line"><span class="comment">// 分隔符 === 空字符串 ""</span></span><br><span class="line"></span><br><span class="line">str = arr.join(separator)</span><br><span class="line"><span class="comment">// 分隔符</span></span><br></pre></td></tr></table></figure><h2 id="参数-14"><a href="#参数-14" class="headerlink" title="参数"></a>参数</h2><p><code>separator</code><br>指定一个字符串来分隔数组的每个元素。</p><h2 id="返回值-12"><a href="#返回值-12" class="headerlink" title="返回值"></a>返回值</h2><p>一个所有数组元素连接的字符串。如果 arr.length 为0，则返回空字符串</p><h1 id="Array-keys"><a href="#Array-keys" class="headerlink" title="Array.keys()"></a>Array.keys()</h1><h2 id="作用-15"><a href="#作用-15" class="headerlink" title="作用"></a>作用</h2><p>返回一个新的Array迭代器，它包含数组中每个索引的键。</p><h1 id="Array-map"><a href="#Array-map" class="headerlink" title="Array.map()"></a>Array.map()</h1><h2 id="作用-16"><a href="#作用-16" class="headerlink" title="作用"></a>作用</h2><p>创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><h2 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> new_array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue, index, array</span>) </span>&#123; </span><br><span class="line">    <span class="comment">// Return element for new_array </span></span><br><span class="line">&#125;[, thisArg])</span><br></pre></td></tr></table></figure><h2 id="参数-15"><a href="#参数-15" class="headerlink" title="参数"></a>参数</h2><p><code>callback</code><br>生成新数组元素的函数，使用三个参数：<br><code>currentValue</code><br>callback 的第一个参数，数组中正在处理的当前元素。<br><code>index</code><br>callback 的第二个参数，数组中正在处理的当前元素的索引。<br><code>array</code><br>callback 的第三个参数，map 方法被调用的数组。<br><code>thisArg</code><br>可选的。执行 callback 函数时 使用的this 值。</p><h2 id="返回值-13"><a href="#返回值-13" class="headerlink" title="返回值"></a>返回值</h2><p>一个新数组，每个元素都是回调函数的结果。</p><h2 id="示例-11"><a href="#示例-11" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">// [1, NaN, NaN]</span></span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map(<span class="built_in">Number</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'12345'</span>;</span><br><span class="line"><span class="built_in">Array</span>.prototype.map.call(str, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;).reverse().join(<span class="string">''</span>); </span><br><span class="line"><span class="comment">// 输出: '54321'</span></span><br></pre></td></tr></table></figure><h1 id="Array-pop"><a href="#Array-pop" class="headerlink" title="Array.pop()"></a>Array.pop()</h1><h2 id="作用-17"><a href="#作用-17" class="headerlink" title="作用"></a>作用</h2><p>从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</p><h2 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.pop()</span><br></pre></td></tr></table></figure><h2 id="返回值-14"><a href="#返回值-14" class="headerlink" title="返回值"></a>返回值</h2><p>从数组中删除的元素(当数组为空时返回undefined)。</p><h1 id="Array-push"><a href="#Array-push" class="headerlink" title="Array.push()"></a>Array.push()</h1><h2 id="作用-18"><a href="#作用-18" class="headerlink" title="作用"></a>作用</h2><p>将一个或多个元素添加到数组的末尾，并返回新数组的长度。</p><h2 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.push(element1, ..., elementN)</span><br></pre></td></tr></table></figure><h2 id="参数-16"><a href="#参数-16" class="headerlink" title="参数"></a>参数</h2><p><code>elementN</code><br>被添加到数组末尾的元素。</p><h2 id="返回值-15"><a href="#返回值-15" class="headerlink" title="返回值"></a>返回值</h2><p>当调用该方法时，新的 length 属性值将被返回。</p><h2 id="示例-12"><a href="#示例-12" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sports = [<span class="string">"soccer"</span>, <span class="string">"baseball"</span>];</span><br><span class="line"><span class="keyword">var</span> total = sports.push(<span class="string">"football"</span>, <span class="string">"swimming"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sports); </span><br><span class="line"><span class="comment">// ["soccer", "baseball", "football", "swimming"]</span></span><br><span class="line"><span class="built_in">console</span>.log(total);  </span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vegetables = [<span class="string">'parsnip'</span>, <span class="string">'potato'</span>];</span><br><span class="line"><span class="keyword">var</span> moreVegs = [<span class="string">'celery'</span>, <span class="string">'beetroot'</span>];</span><br><span class="line"><span class="comment">// 将第二个数组融合进第一个数组</span></span><br><span class="line"><span class="comment">// 相当于 vegetables.push('celery', 'beetroot');</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(vegetables, moreVegs);</span><br><span class="line"><span class="built_in">console</span>.log(vegetables); </span><br><span class="line"><span class="comment">// ['parsnip', 'potato', 'celery', 'beetroot']</span></span><br></pre></td></tr></table></figure><h1 id="Array-reduce"><a href="#Array-reduce" class="headerlink" title="Array.reduce()"></a>Array.reduce()</h1><h2 id="作用-19"><a href="#作用-19" class="headerlink" title="作用"></a>作用</h2><p>对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。</p><h2 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback[, initialValue])</span><br></pre></td></tr></table></figure><h2 id="参数-17"><a href="#参数-17" class="headerlink" title="参数"></a>参数</h2><p><code>callback</code><br>执行数组中每个值的函数，包含四个参数：<br><code>accumulator</code><br>累加器累加回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（如下所示）。</p><p><code>currentValue</code><br>数组中正在处理的元素。<br><code>currentIndex可选</code><br>数组中正在处理的当前元素的索引。 如果提供了initialValue，则索引号为0，否则为索引为1。<br><code>array可选</code><br>调用reduce的数组<br><code>initialValue可选</code><br>用作第一个调用 callback的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p><h2 id="返回值-16"><a href="#返回值-16" class="headerlink" title="返回值"></a>返回值</h2><p>函数累计处理的结果</p><h2 id="示例-13"><a href="#示例-13" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Tiff'</span>, <span class="string">'Bruce'</span>, <span class="string">'Alice'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countedNames = names.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">allNames, name</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (name <span class="keyword">in</span> allNames) &#123;</span><br><span class="line">    allNames[name]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    allNames[name] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> allNames;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="comment">// countedNames is:</span></span><br><span class="line"><span class="comment">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.sort().reduce(<span class="function">(<span class="params">init, current</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(init.length===<span class="number">0</span> || init[init.length<span class="number">-1</span>]!==current)&#123;</span><br><span class="line">        init.push(current);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> init;</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><h1 id="Array-reverse"><a href="#Array-reverse" class="headerlink" title="Array.reverse()"></a>Array.reverse()</h1><h2 id="作用-20"><a href="#作用-20" class="headerlink" title="作用"></a>作用</h2><p>将数组中元素的位置颠倒。</p><h1 id="Array-shift"><a href="#Array-shift" class="headerlink" title="Array.shift()"></a>Array.shift()</h1><h2 id="作用-21"><a href="#作用-21" class="headerlink" title="作用"></a>作用</h2><p>从数组中删除第一个元素，并返回该元素的值。此方法更改数组的<br>长度。</p><h2 id="返回值-17"><a href="#返回值-17" class="headerlink" title="返回值"></a>返回值</h2><p>从数组中删除的元素; 如果数组为空则返回undefined 。</p><h2 id="示例-14"><a href="#示例-14" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'mandarin'</span>, <span class="string">'surgeon'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'调用 shift 之前: '</span> + myFish);</span><br><span class="line"><span class="comment">// "调用 shift 之前: angel,clown,mandarin,surgeon"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shifted = myFish.shift(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'调用 shift 之后: '</span> + myFish); </span><br><span class="line"><span class="comment">// "调用 shift 之后: clown,mandarin,surgeon" </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'被删除的元素: '</span> + shifted); </span><br><span class="line"><span class="comment">// "被删除的元素: angel"</span></span><br></pre></td></tr></table></figure><h1 id="Array-slice"><a href="#Array-slice" class="headerlink" title="Array.slice()"></a>Array.slice()</h1><h2 id="作用-22"><a href="#作用-22" class="headerlink" title="作用"></a>作用</h2><p>返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。且原始数组不会被修改。</p><h2 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr.slice();</span><br><span class="line"><span class="comment">// [0, end]</span></span><br><span class="line"></span><br><span class="line">arr.slice(begin);</span><br><span class="line"><span class="comment">// [begin, end]</span></span><br><span class="line"></span><br><span class="line">arr.slice(begin, end);</span><br><span class="line"><span class="comment">// [begin, end)</span></span><br></pre></td></tr></table></figure><h2 id="参数-18"><a href="#参数-18" class="headerlink" title="参数"></a>参数</h2><p><code>begin 可选</code><br>从该索引处开始提取原数组中的元素（从0开始）。<br>如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2)表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。<br>如果省略 begin，则 slice 从索引 0 开始。<br><code>end可选</code><br>在该索引处结束提取原数组元素（从0开始）。slice会提取原数组中索引从 begin 到 end 的所有元素（包含begin，但不包含end）。<br>slice(1,4) 提取原数组中的第二个元素开始直到第四个元素的所有元素 （索引为 1, 2, 3的元素）。<br>如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1)表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。<br>如果 end 被省略，则slice 会一直提取到原数组末尾。<br>如果 end 大于数组长度，slice 也会一直提取到原数组末尾。</p><h2 id="返回值-18"><a href="#返回值-18" class="headerlink" title="返回值"></a>返回值</h2><p>一个含有提取元素的新数组</p><h2 id="示例-15"><a href="#示例-15" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = [<span class="string">'ant'</span>, <span class="string">'bison'</span>, <span class="string">'camel'</span>, <span class="string">'duck'</span>, <span class="string">'elephant'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// expected output: Array ["camel", "duck", "elephant"]</span></span><br></pre></td></tr></table></figure><h1 id="Array-some"><a href="#Array-some" class="headerlink" title="Array.some()"></a>Array.some()</h1><h2 id="作用-23"><a href="#作用-23" class="headerlink" title="作用"></a>作用</h2><p>测试数组中的某些元素是否通过由提供的函数实现的测试。</p><h2 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.some(callback[, thisArg])</span><br></pre></td></tr></table></figure><h2 id="参数-19"><a href="#参数-19" class="headerlink" title="参数"></a>参数</h2><p><code>callback</code><br>用来测试每个元素的函数，接受三个参数：<br><code>currentValue</code><br>数组中正在处理的元素。<br><code>index 可选</code><br>数组中正在处理的元素的索引值。<br><code>array可选</code><br>some()被调用的数组。<br><code>thisArg可选</code><br>执行 callback 时使用的 this 值。</p><h2 id="返回值-19"><a href="#返回值-19" class="headerlink" title="返回值"></a>返回值</h2><p>如果回调函数返回任何数组元素的truthy值，则返回true；否则为false。</p><h2 id="示例-16"><a href="#示例-16" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBiggerThan10</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h1 id="Array-sort"><a href="#Array-sort" class="headerlink" title="Array.sort()"></a>Array.sort()</h1><h2 id="作用-24"><a href="#作用-24" class="headerlink" title="作用"></a>作用</h2><p>对数组的元素进行排序，并返回数组。</p><h2 id="语法-22"><a href="#语法-22" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.sort() </span><br><span class="line"></span><br><span class="line">arr.sort(compareFunction)</span><br></pre></td></tr></table></figure><h2 id="参数-20"><a href="#参数-20" class="headerlink" title="参数"></a>参数</h2><p><code>compareFunction</code><br>可选。用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。</p><h2 id="返回值-20"><a href="#返回值-20" class="headerlink" title="返回值"></a>返回值</h2><p>返回排序后的数组。原数组已经被排序后的数组代替。</p><h2 id="示例-17"><a href="#示例-17" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>]; </span><br><span class="line">numbers.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b); </span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h1 id="Array-splice"><a href="#Array-splice" class="headerlink" title="Array.splice()"></a>Array.splice()</h1><h2 id="作用-25"><a href="#作用-25" class="headerlink" title="作用"></a>作用</h2><p>通过删除现有元素和/或添加新元素来更改一个数组的内容。</p><h2 id="语法-23"><a href="#语法-23" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.splice(start[, deleteCount[, item1[, item2[, ...]]]])</span><br></pre></td></tr></table></figure><h2 id="参数-21"><a href="#参数-21" class="headerlink" title="参数"></a>参数</h2><p><code>start​</code><br>指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数）；若只使用start参数而不使用deleteCount、item，如：array.splice(start) ，表示删除[start，end]的元素。<br><code>deleteCount 可选</code><br>整数，表示要移除的数组元素的个数。如果 deleteCount 是 0，则不移除元素。这种情况下，至少应添加一个新元素。如果 deleteCount 大于start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。<br>如果deleteCount被省略，则其相当于(arr.length - start)。<br><code>item1, item2, ... 可选</code><br>要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素。</p><h2 id="返回值-21"><a href="#返回值-21" class="headerlink" title="返回值"></a>返回值</h2><p>由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</p><h2 id="示例-18"><a href="#示例-18" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">"angel"</span>, <span class="string">"clown"</span>, <span class="string">"mandarin"</span>, <span class="string">"surgeon"</span>]; </span><br><span class="line"><span class="comment">//从第 2 位开始删除 0 个元素，插入 "drum" </span></span><br><span class="line"><span class="keyword">var</span> removed = myFish.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">"drum"</span>); </span><br><span class="line"><span class="comment">//运算后的 myFish:["angel", "clown", "drum", "mandarin", "surgeon"] </span></span><br><span class="line"><span class="comment">//被删除元素数组：[]，没有元素被删除</span></span><br></pre></td></tr></table></figure><h1 id="Array-unshift"><a href="#Array-unshift" class="headerlink" title="Array.unshift()"></a>Array.unshift()</h1><h2 id="作用-26"><a href="#作用-26" class="headerlink" title="作用"></a>作用</h2><p>将一个或多个元素添加到数组的开头，并返回新数组的长度。</p><h2 id="语法-24"><a href="#语法-24" class="headerlink" title="语法"></a>语法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.unshift(element1, ..., elementN)</span><br></pre></td></tr></table></figure><h2 id="参数-22"><a href="#参数-22" class="headerlink" title="参数"></a>参数</h2><p><code>element1, ..., elementN</code><br>要添加到数组开头的元素。</p><h2 id="返回值-22"><a href="#返回值-22" class="headerlink" title="返回值"></a>返回值</h2><p>当一个对象调用该方法时，返回其 length 属性值。</p><h2 id="示例-19"><a href="#示例-19" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">arr.unshift(<span class="number">0</span>); <span class="comment">//result of call is 3, the new array length</span></span><br><span class="line"><span class="comment">//arr is [0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">arr.unshift(<span class="number">-2</span>, <span class="number">-1</span>); <span class="comment">// = 5</span></span><br><span class="line"><span class="comment">//arr is [-2, -1, 0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">arr.unshift( [<span class="number">-3</span>] );</span><br><span class="line"><span class="comment">//arr is [[-3], -2, -1, 0, 1, 2]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Array-length&quot;&gt;&lt;a href=&quot;#Array-length&quot; class=&quot;headerlink&quot; title=&quot;Array.length&quot;&gt;&lt;/a&gt;Array.length&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;
      
    
    </summary>
    
      <category term="前端" scheme="https://ebooks4coding.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://ebooks4coding.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>理解Array.prototype.reduce()</title>
    <link href="https://ebooks4coding.com/feks-basic-array-flatten/"/>
    <id>https://ebooks4coding.com/feks-basic-array-flatten/</id>
    <published>2018-05-09T18:11:00.000Z</published>
    <updated>2018-12-11T13:20:24.881Z</updated>
    
    <content type="html"><![CDATA[<p>自己对js数组的reduce方法和递归还不是很透彻，因此写下此文加深理解。<br>I hope you find my examples helpful.</p><p><em>给定一个数组</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, [<span class="number">2</span>], [<span class="number">3</span>, [[<span class="number">4</span>]]]]</span><br></pre></td></tr></table></figure><p><em>想要的输出结果</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flat = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h1 id="使用循环和条件语句"><a href="#使用循环和条件语句" class="headerlink" title="使用循环和条件语句"></a>使用循环和条件语句</h1><p>如果我们知道嵌套的最大层数（本例是4），我们就可以使用循环遍历加上条件判断的方法来实现…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> flat = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr[i])) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> ii=<span class="number">0</span>; ii&lt;arr[i].length; ii++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr[i][ii])) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> iii=<span class="number">0</span>; iii&lt;arr[i][ii].length; iii++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> iiii=<span class="number">0</span>; iiii&lt;arr[i][ii][iii].length; iiii++) &#123;</span><br><span class="line">              <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr[i][ii][iii])) &#123;</span><br><span class="line">                flat.push(arr[i][ii][iii][iiii]);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                flat.push(arr[i][ii][iii]);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          flat.push(arr[i][ii]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      flat.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>这样是可以实现的，但代码读起来实在是…除此之外，有一个前提条件是你必须知道嵌套的深度，你能想象如何调试这么混乱的代码么？</p><h1 id="使用reduce"><a href="#使用reduce" class="headerlink" title="使用reduce"></a>使用reduce</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flat = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">acc, curr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> acc.concat(curr);</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 1, 2, 3, [ [ 4 ] ] ]</span></span><br></pre></td></tr></table></figure><p>看着是不是很简洁，不过看结果好像和我们想要的不太一样，<strong>这里的嵌套数组没有被正确平铺</strong>。</p><p>让我们先来理清reduce的作用进而解决这个问题。</p><p><strong>Array.prototype.reduce()</strong></p><blockquote><p>The reduce() method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.</p></blockquote><p>这句MDN的解释看起来并不复杂，我们举个🌰更好的理解。</p><p>家里来了客人，你要把几个🍎洗干净放入一个盘子中招待客人。</p><p>上面这个例子中，几个🍎就是我们<em>arr</em>，盘子就是我们的<em>acc</em>，也就是<em>accumulator</em>，一开始盘子是空的数组，当你拿到当前的🍎，洗好并放入盘子中 (.concat())，当苹果都洗完后，你将装有洗干净🍎的盘子递给客人。</p><h1 id="使用reduce递归处理嵌套数组"><a href="#使用reduce递归处理嵌套数组" class="headerlink" title="使用reduce递归处理嵌套数组"></a>使用reduce递归处理嵌套数组</h1><p>现在看来还不错，我们有了一盘洗干净的🍎。但还有嵌套数组需要解决。</p><p>回到我们的例子上。</p><p>让我们假设这些苹果是成堆的或包装在盒子里的，且每个盒子里还有可能有几个小盒子包装有🍎。</p><p>这里，我们需要列举可能的情况及处理方法：</p><ol><li>如果当前拿到的是一堆🍎🍎🍎，则从这堆🍎中取出一个</li><li>如果当前拿到的是一个苹果，则洗干净放入盘中</li><li>如果当前拿到的是盒子，打开盒子，如果盒子中是一个🍎，则返回步骤2</li><li>如果盒子中包含另一个盒子，则打开盒子，返回步骤3</li><li>当拿完之后，给客人一盘洗干净的🍎</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr)) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">acc, curr</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> acc.concat(flatten(curr));</span><br><span class="line">    &#125;, []);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure><p>稍后我们继续来解释，先来看下 <strong>递归</strong></p><p><strong>Recursion</strong></p><blockquote><p>An act of a function calling itself. Recursion is used to solve problems that contain smaller sub-problems. A recursive function can receive two inputs: a base case (ends recursion) or a recursive case (continues recursion).</p></blockquote><p>简单说来，就是函数自己内部调用自己。</p><p>一个递归函数由两部分组成，一部分是用来结束递归的条件语句，另一部分是用来继续递归的部分。</p><p>再来看上面的代码，你会发现 <strong>flatten</strong> 出现了两次，第一次是声明这个方法，告诉你调用这个方法就可以实现我们想要的。第二次出现告诉你对于你拿到的应该怎么处理，是个🍎还是个盒子，交给它就行了。</p><p>现在，我们一行一行代码来剖析：</p><ol><li><code>function flatten(arr) {</code> 我们命名这一处理函数为flatten，并声明它具有一个参数arr</li><li><code>if (Array.isArray(arr)) {</code> 判断传入的这个参数是否是数组（虽然一开始它一定是，[偷笑]:-D）</li><li><code>return arr.reduce(function(acc, curr){</code> 如果是数组，我们将用reduce来处理</li><li><code>return acc.concat(flatten(curr));</code> 递归处理嵌套函数，并用累加器将结果concat。</li><li><code>}, []);</code> 告诉reduce初始的累加器为一个空数组。</li><li><code>} else {</code> 如果不是数组</li><li><code>return arr;</code> 不管arr是啥，直接返回</li><li><code>}</code> 结束if-else语句</li><li><code>}</code> 结束flatten函数</li></ol><p>到这里就完工啦！我们成功的将24行具有四层for循环嵌套的代码，升级成更简洁，只有9行代码的reduce递归方案。</p><p><strong>reduce</strong> 和 <strong>recursion</strong> 一开始理解起来比较费劲，但确实是不错的工具，一旦你理解了它们，做起事来更加事半功倍。</p><p>Thanks for reading!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自己对js数组的reduce方法和递归还不是很透彻，因此写下此文加深理解。&lt;br&gt;I hope you find my examples helpful.&lt;/p&gt;&lt;p&gt;&lt;em&gt;给定一个数组&lt;/em&gt;&lt;/p&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="前端" scheme="https://ebooks4coding.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://ebooks4coding.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端知识体系</title>
    <link href="https://ebooks4coding.com/front-end-knowledge-system/"/>
    <id>https://ebooks4coding.com/front-end-knowledge-system/</id>
    <published>2018-05-04T09:38:00.000Z</published>
    <updated>2018-12-11T13:20:24.881Z</updated>
    
    <content type="html"><![CDATA[<p>不定时更新:-D</p><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><h3 id="JS-语言基础（数据结构、类型、循环、堆栈）"><a href="#JS-语言基础（数据结构、类型、循环、堆栈）" class="headerlink" title="JS 语言基础（数据结构、类型、循环、堆栈）"></a>JS 语言基础（数据结构、类型、循环、堆栈）</h3><ul><li></li><li><a href="https://segmentfault.com/a/1190000009041008" target="_blank" rel="noopener">深入理解JavaScript执行上下文、函数堆栈、提升的概念</a></li></ul><h3 id="JS-闭包、高阶函数"><a href="#JS-闭包、高阶函数" class="headerlink" title="JS 闭包、高阶函数"></a>JS 闭包、高阶函数</h3><h3 id="EventLoop-amp-异步模型"><a href="#EventLoop-amp-异步模型" class="headerlink" title="EventLoop &amp; 异步模型"></a>EventLoop &amp; 异步模型</h3><h3 id="bind模拟实现"><a href="#bind模拟实现" class="headerlink" title="bind模拟实现"></a>bind模拟实现</h3><ul><li><a href="https://blog.csdn.net/qq_40479190/article/details/78324270" target="_blank" rel="noopener">JavaScript 之 call和apply，bind 的模拟实现</a></li></ul><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><h3 id="ES6、ES7、ESNext"><a href="#ES6、ES7、ESNext" class="headerlink" title="ES6、ES7、ESNext"></a>ES6、ES7、ESNext</h3><h3 id="JS-模块化"><a href="#JS-模块化" class="headerlink" title="JS 模块化"></a>JS 模块化</h3><h3 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h3><h3 id="地狱回调-amp-Promise"><a href="#地狱回调-amp-Promise" class="headerlink" title="地狱回调 &amp; Promise"></a>地狱回调 &amp; Promise</h3><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><ul><li><a href="https://juejin.im/post/5b88a54751882542ea13d253" target="_blank" rel="noopener">throttle &amp; debounce</a></li></ul><h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><h3 id="如何编写一个-babel-插件"><a href="#如何编写一个-babel-插件" class="headerlink" title="如何编写一个 babel 插件"></a>如何编写一个 babel 插件</h3><h3 id="immutable"><a href="#immutable" class="headerlink" title="immutable"></a>immutable</h3><h3 id="source-map"><a href="#source-map" class="headerlink" title="source map"></a>source map</h3><h3 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h3><h3 id="Web-Assembly"><a href="#Web-Assembly" class="headerlink" title="Web Assembly"></a>Web Assembly</h3><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="Level-1-1"><a href="#Level-1-1" class="headerlink" title="Level 1"></a>Level 1</h2><h3 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h3><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h3 id="CSS-单位"><a href="#CSS-单位" class="headerlink" title="CSS 单位"></a>CSS 单位</h3><h3 id="display-的几种属性"><a href="#display-的几种属性" class="headerlink" title="display 的几种属性"></a>display 的几种属性</h3><h3 id="如何进行定位"><a href="#如何进行定位" class="headerlink" title="如何进行定位"></a>如何进行定位</h3><h3 id="vertial-align-的几种属性"><a href="#vertial-align-的几种属性" class="headerlink" title="vertial-align 的几种属性"></a>vertial-align 的几种属性</h3><h3 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h3><ul><li><a href="https://juejin.im/post/5b9a4477f265da0ad82bf921" target="_blank" rel="noopener">CSS实现水平垂直居中的10种方式（史上最全）</a></li></ul><h2 id="Level-2-1"><a href="#Level-2-1" class="headerlink" title="Level 2"></a>Level 2</h2><h3 id="flex-box-标准"><a href="#flex-box-标准" class="headerlink" title="flex box 标准"></a>flex box 标准</h3><h3 id="data-url"><a href="#data-url" class="headerlink" title="data-url"></a>data-url</h3><h3 id="响应式布局-amp-自适应布局"><a href="#响应式布局-amp-自适应布局" class="headerlink" title="响应式布局 &amp; 自适应布局"></a>响应式布局 &amp; 自适应布局</h3><h3 id="动画、变形、Animation-API"><a href="#动画、变形、Animation-API" class="headerlink" title="动画、变形、Animation API"></a>动画、变形、Animation API</h3><h3 id="less、scss、post-css"><a href="#less、scss、post-css" class="headerlink" title="less、scss、post-css"></a>less、scss、post-css</h3><h3 id="font-icon"><a href="#font-icon" class="headerlink" title="font-icon"></a>font-icon</h3><h2 id="Level-3-1"><a href="#Level-3-1" class="headerlink" title="Level 3"></a>Level 3</h2><h3 id="grid-标准"><a href="#grid-标准" class="headerlink" title="grid 标准"></a>grid 标准</h3><h3 id="radial-gradient、linear-gradient"><a href="#radial-gradient、linear-gradient" class="headerlink" title="radial-gradient、linear-gradient"></a>radial-gradient、linear-gradient</h3><h3 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h3><h3 id="Paint-API"><a href="#Paint-API" class="headerlink" title="Paint API"></a>Paint API</h3><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><h3 id="css-变量"><a href="#css-变量" class="headerlink" title="css 变量"></a>css 变量</h3><h3 id="layout-paint-compose"><a href="#layout-paint-compose" class="headerlink" title="layout/paint/compose"></a>layout/paint/compose</h3><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="Level-1-2"><a href="#Level-1-2" class="headerlink" title="Level 1"></a>Level 1</h2><h3 id="HTML4-XHTML-HTML5"><a href="#HTML4-XHTML-HTML5" class="headerlink" title="HTML4/XHTML/HTML5"></a>HTML4/XHTML/HTML5</h3><h3 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h3><ul><li><a href="https://www.cnblogs.com/cencenyue/p/7646718.html" target="_blank" rel="noopener">重排和重绘</a></li></ul><h3 id="FORM-表单"><a href="#FORM-表单" class="headerlink" title="FORM 表单"></a>FORM 表单</h3><h2 id="Level-2-2"><a href="#Level-2-2" class="headerlink" title="Level 2"></a>Level 2</h2><h3 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h3><h3 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h3><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><h3 id="Audio-Video"><a href="#Audio-Video" class="headerlink" title="Audio/Video"></a>Audio/Video</h3><h2 id="Level-3-2"><a href="#Level-3-2" class="headerlink" title="Level 3"></a>Level 3</h2><h3 id="WebSQL"><a href="#WebSQL" class="headerlink" title="WebSQL"></a>WebSQL</h3><h3 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h3><h3 id="Web-Component"><a href="#Web-Component" class="headerlink" title="Web Component"></a>Web Component</h3><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="Level-1-3"><a href="#Level-1-3" class="headerlink" title="Level 1"></a>Level 1</h2><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h3><h3 id="HTTP-Content-Type"><a href="#HTTP-Content-Type" class="headerlink" title="HTTP Content-Type"></a>HTTP Content-Type</h3><h3 id="XMLHTTPRequest"><a href="#XMLHTTPRequest" class="headerlink" title="XMLHTTPRequest"></a>XMLHTTPRequest</h3><h3 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a>HTTP 缓存</h3><ul><li><a href="https://www.cnblogs.com/chenqf/p/6386163.html" target="_blank" rel="noopener">彻底弄懂HTTP缓存机制及原理</a></li></ul><h3 id="轮询-长连接"><a href="#轮询-长连接" class="headerlink" title="轮询/长连接"></a>轮询/长连接</h3><h2 id="Level-2-3"><a href="#Level-2-3" class="headerlink" title="Level 2"></a>Level 2</h2><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><ul><li><a href="https://medium.com/@sahilkkrazy/fetch-vs-axios-http-request-c9afa43f804e" target="_blank" rel="noopener">fetch与axios比较</a></li></ul><h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><ul><li><a href="https://blog.csdn.net/frank_good/article/details/50856585" target="_blank" rel="noopener">看完让你彻底搞懂Websocket原理</a></li></ul><h3 id="CSRF-XSS"><a href="#CSRF-XSS" class="headerlink" title="CSRF/XSS"></a>CSRF/XSS</h3><h2 id="Level-3-3"><a href="#Level-3-3" class="headerlink" title="Level 3"></a>Level 3</h2><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><h3 id="HTTPS-HTTP2"><a href="#HTTPS-HTTP2" class="headerlink" title="HTTPS/HTTP2"></a>HTTPS/HTTP2</h3><ul><li><a href="https://www.cnblogs.com/zxj015/p/6530766.html" target="_blank" rel="noopener">Https协议详解</a></li></ul><h3 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h3><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><h2 id="Level-1-4"><a href="#Level-1-4" class="headerlink" title="Level 1"></a>Level 1</h2><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><h2 id="Level-2-4"><a href="#Level-2-4" class="headerlink" title="Level 2"></a>Level 2</h2><h3 id="单向数据流-flux（React）"><a href="#单向数据流-flux（React）" class="headerlink" title="单向数据流/flux（React）"></a>单向数据流/flux（React）</h3><h3 id="Redux（React）"><a href="#Redux（React）" class="headerlink" title="Redux（React）"></a>Redux（React）</h3><ul><li><a href="https://www.cnblogs.com/hhhyaaon/p/5860159.html" target="_blank" rel="noopener">Redux原理</a></li></ul><h3 id="MobX（React）"><a href="#MobX（React）" class="headerlink" title="MobX（React）"></a>MobX（React）</h3><h3 id="Diff算法（React）"><a href="#Diff算法（React）" class="headerlink" title="Diff算法（React）"></a>Diff算法（React）</h3><ul><li><a href="https://yq.aliyun.com/articles/586669?spm=a2c4e.11153940.blogcont586668.16.73e34227t1wmBv" target="_blank" rel="noopener">图解React Diff算法及新架构Fiber</a></li></ul><h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h3><h3 id="Vuex（Vue）"><a href="#Vuex（Vue）" class="headerlink" title="Vuex（Vue）"></a>Vuex（Vue）</h3><h3 id="Vue-computed实现原理（Vue）"><a href="#Vue-computed实现原理（Vue）" class="headerlink" title="Vue computed实现原理（Vue）"></a>Vue computed实现原理（Vue）</h3><h3 id="Vue-双向绑定实现原理（Vue）"><a href="#Vue-双向绑定实现原理（Vue）" class="headerlink" title="Vue 双向绑定实现原理（Vue）"></a>Vue 双向绑定实现原理（Vue）</h3><h3 id="mpvue（小程序）"><a href="#mpvue（小程序）" class="headerlink" title="mpvue（小程序）"></a>mpvue（小程序）</h3><h3 id="dirty-check（Angular）"><a href="#dirty-check（Angular）" class="headerlink" title="dirty check（Angular）"></a>dirty check（Angular）</h3><h3 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h3><ul><li><a href="https://juejin.im/post/5b9a2f07e51d450e7d099492" target="_blank" rel="noopener">koa-route</a></li><li><a href="https://cnodejs.org/topic/5b13c12157137f22415c4892" target="_blank" rel="noopener">全面理解 koa-router</a><h2 id="Level-3-4"><a href="#Level-3-4" class="headerlink" title="Level 3"></a>Level 3</h2></li></ul><h3 id="高阶组件"><a href="#高阶组件" class="headerlink" title="高阶组件"></a>高阶组件</h3><h3 id="GraphQL-Relay"><a href="#GraphQL-Relay" class="headerlink" title="GraphQL/Relay"></a>GraphQL/Relay</h3><h3 id="React-setState"><a href="#React-setState" class="headerlink" title="React setState"></a>React setState</h3><p><a href="https://juejin.im/post/5c0cdb95f265da616f6fc9dd" target="_blank" rel="noopener">react的setState如何知道该做什么？</a></p><h3 id="React-Context"><a href="#React-Context" class="headerlink" title="React Context"></a>React Context</h3><ul><li><a href="https://itnext.io/understanding-the-react-context-api-through-building-a-shared-snackbar-for-in-app-notifications-6c199446b80c" target="_blank" rel="noopener">Learn the React Context API with a Practical Example You Can Bring to Your Apps</a></li></ul><h3 id="React-Fiber"><a href="#React-Fiber" class="headerlink" title="React Fiber"></a>React Fiber</h3><h3 id="Saga-thunk"><a href="#Saga-thunk" class="headerlink" title="Saga/thunk"></a>Saga/thunk</h3><h3 id="Node-Webkit-Electron"><a href="#Node-Webkit-Electron" class="headerlink" title="Node-Webkit/Electron"></a>Node-Webkit/Electron</h3><h1 id="工程"><a href="#工程" class="headerlink" title="工程"></a>工程</h1><h2 id="Level-1-5"><a href="#Level-1-5" class="headerlink" title="Level 1"></a>Level 1</h2><h3 id="单元测试-mocha-jest"><a href="#单元测试-mocha-jest" class="headerlink" title="单元测试 mocha/jest"></a>单元测试 mocha/jest</h3><h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/50055740" target="_blank" rel="noopener">你不知道的Node.js性能优化</a></li></ul><h3 id="npm-yarn"><a href="#npm-yarn" class="headerlink" title="npm/yarn"></a>npm/yarn</h3><h2 id="Level-2-5"><a href="#Level-2-5" class="headerlink" title="Level 2"></a>Level 2</h2><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><ul><li><a href="https://www.cnblogs.com/yxy99/p/5852987.html" target="_blank" rel="noopener">细说webpack之流程篇</a></li></ul><h3 id="ESlint-TSLint"><a href="#ESlint-TSLint" class="headerlink" title="ESlint/TSLint"></a>ESlint/TSLint</h3><h3 id="Stream-Buffer"><a href="#Stream-Buffer" class="headerlink" title="Stream/Buffer"></a>Stream/Buffer</h3><h3 id="Metro"><a href="#Metro" class="headerlink" title="Metro"></a>Metro</h3><h2 id="Level-3-5"><a href="#Level-3-5" class="headerlink" title="Level 3"></a>Level 3</h2><h3 id="webpack-loader"><a href="#webpack-loader" class="headerlink" title="webpack loader"></a>webpack loader</h3><h3 id="gulp-plugin"><a href="#gulp-plugin" class="headerlink" title="gulp plugin"></a>gulp plugin</h3><h3 id="vinyl"><a href="#vinyl" class="headerlink" title="vinyl"></a>vinyl</h3><h3 id="acorn-babylon"><a href="#acorn-babylon" class="headerlink" title="acorn/babylon"></a>acorn/babylon</h3><h1 id="开发-效率"><a href="#开发-效率" class="headerlink" title="开发/效率"></a>开发/效率</h1><h2 id="Level-1-6"><a href="#Level-1-6" class="headerlink" title="Level 1"></a>Level 1</h2><h3 id="dev-tool基本使用方法"><a href="#dev-tool基本使用方法" class="headerlink" title="dev-tool基本使用方法"></a>dev-tool基本使用方法</h3><h3 id="VSCode-Sublime-Vim-Webstorm-Atom"><a href="#VSCode-Sublime-Vim-Webstorm-Atom" class="headerlink" title="VSCode/Sublime/Vim/Webstorm/Atom"></a>VSCode/Sublime/Vim/Webstorm/Atom</h3><h2 id="Level-2-6"><a href="#Level-2-6" class="headerlink" title="Level 2"></a>Level 2</h2><h3 id="dev-tool-性能分析"><a href="#dev-tool-性能分析" class="headerlink" title="dev-tool 性能分析"></a>dev-tool 性能分析</h3><h2 id="Level-3-6"><a href="#Level-3-6" class="headerlink" title="Level 3"></a>Level 3</h2><h3 id="dev-tool-内存泄露检查"><a href="#dev-tool-内存泄露检查" class="headerlink" title="dev-tool 内存泄露检查"></a>dev-tool 内存泄露检查</h3><h1 id="代码风格"><a href="#代码风格" class="headerlink" title="代码风格"></a>代码风格</h1><ul><li><a href="https://americanexpress.io/clean-code-dirty-code/" target="_blank" rel="noopener">Clean Code vs. Dirty Code: React Best Practices</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不定时更新:-D&lt;/p&gt;&lt;h1 id=&quot;JS&quot;&gt;&lt;a href=&quot;#JS&quot; class=&quot;headerlink&quot; title=&quot;JS&quot;&gt;&lt;/a&gt;JS&lt;/h1&gt;&lt;h2 id=&quot;Level-1&quot;&gt;&lt;a href=&quot;#Level-1&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="前端" scheme="https://ebooks4coding.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="https://ebooks4coding.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>github + hexo(melody) + travis 做免费且高大上的博客</title>
    <link href="https://ebooks4coding.com/beginner-how-to-make-a-blog/"/>
    <id>https://ebooks4coding.com/beginner-how-to-make-a-blog/</id>
    <published>2018-04-06T12:16:00.000Z</published>
    <updated>2018-12-11T13:20:24.881Z</updated>
    
    <content type="html"><![CDATA[<p>从上大学到现在，换过很多博客网站，从最早的博客园，到CSDN，再到阿里云主机上自建博客，写了很多东西，但非常零散，而且也觉得UI样式过时了。<br>直到遇到github、hexo和travis，才感觉写博客是可以多么<code>专注</code>。<br>最近偶然发现一个hexo主题，特别的好看，因此想写下这篇文章。<br>一来做个总结，二来当做对此主题的推广和对主题maker的感谢！<br>废话不多说，上菜。</p><blockquote><p>本文假定你使用的是<code>MAC</code>，且安装有<code>Node</code>，且懂得使用<code>github</code>和<code>git</code>命令</p></blockquote><h2 id="如何才算做到专注"><a href="#如何才算做到专注" class="headerlink" title="如何才算做到专注"></a>如何才算做到专注</h2><p><code>写完blog，直接push到github，完事</code>。这，就是本文要实现的效果。</p><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p><a href="https://github.com" target="_blank" rel="noopener">官网</a><br>首先在github上创建一个项目，项目必须要遵守格式：账户名.github.io。<br>然后从master切出一个分支，如hexo分支，我们把hexo分支作为写博客的分支，把master作为travis构建好的静态资源分支。</p><h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">官网</a><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p></p><p>服务器起来后就可以在浏览器中输入<a href="localhost:4000" target="_blank" rel="noopener">localhost:4000</a>实时看到你博客了</p><h3 id="melody主题"><a href="#melody主题" class="headerlink" title="melody主题"></a>melody主题</h3><p>一切尽在此文档<a href="https://molunerfinn.com/hexo-theme-melody-doc/#/zh-Hans/" target="_blank" rel="noopener">hexo-theme-melody</a></p><h2 id="travis"><a href="#travis" class="headerlink" title="travis"></a>travis</h2><p><a href="https://travis-ci.org" target="_blank" rel="noopener">官网</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://molunerfinn.com/hexo-travisci-https/" target="_blank" rel="noopener">hexo持久化构建以及给自有域名github-page上HTTPS</a><br><a href="https://segmentfault.com/a/1190000009054888" target="_blank" rel="noopener">使用 Travis 自动部署 Hexo 到 Github 与 自己的服务器</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从上大学到现在，换过很多博客网站，从最早的博客园，到CSDN，再到阿里云主机上自建博客，写了很多东西，但非常零散，而且也觉得UI样式过时了。&lt;br&gt;直到遇到github、hexo和travis，才感觉写博客是可以多么&lt;code&gt;专注&lt;/code&gt;。&lt;br&gt;最近偶然发现一个h
      
    
    </summary>
    
      <category term="博客" scheme="https://ebooks4coding.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="blog" scheme="https://ebooks4coding.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>世界，你好！</title>
    <link href="https://ebooks4coding.com/hello-world/"/>
    <id>https://ebooks4coding.com/hello-world/</id>
    <published>2018-04-03T17:40:21.000Z</published>
    <updated>2018-12-11T13:20:24.881Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="hello" scheme="https://ebooks4coding.com/categories/hello/"/>
    
    
      <category term="小白" scheme="https://ebooks4coding.com/tags/%E5%B0%8F%E7%99%BD/"/>
    
  </entry>
  
</feed>
